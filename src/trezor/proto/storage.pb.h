// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef PROTOBUF_storage_2eproto__INCLUDED
#define PROTOBUF_storage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
namespace TrezorProtobuf {
class CoinType;
class CoinTypeDefaultTypeInternal;
extern CoinTypeDefaultTypeInternal _CoinType_default_instance_;
class HDNodePathType;
class HDNodePathTypeDefaultTypeInternal;
extern HDNodePathTypeDefaultTypeInternal _HDNodePathType_default_instance_;
class HDNodeType;
class HDNodeTypeDefaultTypeInternal;
extern HDNodeTypeDefaultTypeInternal _HDNodeType_default_instance_;
class IdentityType;
class IdentityTypeDefaultTypeInternal;
extern IdentityTypeDefaultTypeInternal _IdentityType_default_instance_;
class MultisigRedeemScriptType;
class MultisigRedeemScriptTypeDefaultTypeInternal;
extern MultisigRedeemScriptTypeDefaultTypeInternal _MultisigRedeemScriptType_default_instance_;
class Storage;
class StorageDefaultTypeInternal;
extern StorageDefaultTypeInternal _Storage_default_instance_;
class TransactionType;
class TransactionTypeDefaultTypeInternal;
extern TransactionTypeDefaultTypeInternal _TransactionType_default_instance_;
class TxInputType;
class TxInputTypeDefaultTypeInternal;
extern TxInputTypeDefaultTypeInternal _TxInputType_default_instance_;
class TxOutputBinType;
class TxOutputBinTypeDefaultTypeInternal;
extern TxOutputBinTypeDefaultTypeInternal _TxOutputBinType_default_instance_;
class TxOutputType;
class TxOutputTypeDefaultTypeInternal;
extern TxOutputTypeDefaultTypeInternal _TxOutputType_default_instance_;
class TxRequestDetailsType;
class TxRequestDetailsTypeDefaultTypeInternal;
extern TxRequestDetailsTypeDefaultTypeInternal _TxRequestDetailsType_default_instance_;
class TxRequestSerializedType;
class TxRequestSerializedTypeDefaultTypeInternal;
extern TxRequestSerializedTypeDefaultTypeInternal _TxRequestSerializedType_default_instance_;
}  // namespace TrezorProtobuf

namespace TrezorProtobuf {

namespace protobuf_storage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_storage_2eproto

// ===================================================================

class Storage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TrezorProtobuf.Storage) */ {
 public:
  Storage();
  virtual ~Storage();

  Storage(const Storage& from);

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Storage& default_instance();

  static inline const Storage* internal_default_instance() {
    return reinterpret_cast<const Storage*>(
               &_Storage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Storage* other);

  // implements Message ----------------------------------------------

  inline Storage* New() const PROTOBUF_FINAL { return New(NULL); }

  Storage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Storage& from);
  void MergeFrom(const Storage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Storage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mnemonic = 3;
  bool has_mnemonic() const;
  void clear_mnemonic();
  static const int kMnemonicFieldNumber = 3;
  const ::std::string& mnemonic() const;
  void set_mnemonic(const ::std::string& value);
  #if LANG_CXX11
  void set_mnemonic(::std::string&& value);
  #endif
  void set_mnemonic(const char* value);
  void set_mnemonic(const char* value, size_t size);
  ::std::string* mutable_mnemonic();
  ::std::string* release_mnemonic();
  void set_allocated_mnemonic(::std::string* mnemonic);

  // optional string pin = 6;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 6;
  const ::std::string& pin() const;
  void set_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_pin(::std::string&& value);
  #endif
  void set_pin(const char* value);
  void set_pin(const char* value, size_t size);
  ::std::string* mutable_pin();
  ::std::string* release_pin();
  void set_allocated_pin(::std::string* pin);

  // optional string language = 7;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 7;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional string label = 8;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 8;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional bytes homescreen = 10;
  bool has_homescreen() const;
  void clear_homescreen();
  static const int kHomescreenFieldNumber = 10;
  const ::std::string& homescreen() const;
  void set_homescreen(const ::std::string& value);
  #if LANG_CXX11
  void set_homescreen(::std::string&& value);
  #endif
  void set_homescreen(const char* value);
  void set_homescreen(const void* value, size_t size);
  ::std::string* mutable_homescreen();
  ::std::string* release_homescreen();
  void set_allocated_homescreen(::std::string* homescreen);

  // optional .TrezorProtobuf.HDNodeType node = 2;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::TrezorProtobuf::HDNodeType& node() const;
  ::TrezorProtobuf::HDNodeType* mutable_node();
  ::TrezorProtobuf::HDNodeType* release_node();
  void set_allocated_node(::TrezorProtobuf::HDNodeType* node);

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 pin_failed_attempts = 5;
  bool has_pin_failed_attempts() const;
  void clear_pin_failed_attempts();
  static const int kPinFailedAttemptsFieldNumber = 5;
  ::google::protobuf::uint32 pin_failed_attempts() const;
  void set_pin_failed_attempts(::google::protobuf::uint32 value);

  // optional bool passphrase_protection = 4;
  bool has_passphrase_protection() const;
  void clear_passphrase_protection();
  static const int kPassphraseProtectionFieldNumber = 4;
  bool passphrase_protection() const;
  void set_passphrase_protection(bool value);

  // optional bool imported = 9;
  bool has_imported() const;
  void clear_imported();
  static const int kImportedFieldNumber = 9;
  bool imported() const;
  void set_imported(bool value);

  // optional uint32 u2f_counter = 11;
  bool has_u2f_counter() const;
  void clear_u2f_counter();
  static const int kU2FCounterFieldNumber = 11;
  ::google::protobuf::uint32 u2f_counter() const;
  void set_u2f_counter(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TrezorProtobuf.Storage)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_node();
  void clear_has_node();
  void set_has_mnemonic();
  void clear_has_mnemonic();
  void set_has_passphrase_protection();
  void clear_has_passphrase_protection();
  void set_has_pin_failed_attempts();
  void clear_has_pin_failed_attempts();
  void set_has_pin();
  void clear_has_pin();
  void set_has_language();
  void clear_has_language();
  void set_has_label();
  void clear_has_label();
  void set_has_imported();
  void clear_has_imported();
  void set_has_homescreen();
  void clear_has_homescreen();
  void set_has_u2f_counter();
  void clear_has_u2f_counter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mnemonic_;
  ::google::protobuf::internal::ArenaStringPtr pin_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr homescreen_;
  ::TrezorProtobuf::HDNodeType* node_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 pin_failed_attempts_;
  bool passphrase_protection_;
  bool imported_;
  ::google::protobuf::uint32 u2f_counter_;
  friend struct protobuf_storage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Storage

// required uint32 version = 1;
inline bool Storage::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Storage::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Storage::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Storage::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Storage::version() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.version)
  return version_;
}
inline void Storage::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.version)
}

// optional .TrezorProtobuf.HDNodeType node = 2;
inline bool Storage::has_node() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Storage::set_has_node() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Storage::clear_has_node() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Storage::clear_node() {
  if (node_ != NULL) node_->::TrezorProtobuf::HDNodeType::Clear();
  clear_has_node();
}
inline const ::TrezorProtobuf::HDNodeType& Storage::node() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.node)
  return node_ != NULL ? *node_
                         : *::TrezorProtobuf::HDNodeType::internal_default_instance();
}
inline ::TrezorProtobuf::HDNodeType* Storage::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    node_ = new ::TrezorProtobuf::HDNodeType;
  }
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Storage.node)
  return node_;
}
inline ::TrezorProtobuf::HDNodeType* Storage::release_node() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.Storage.node)
  clear_has_node();
  ::TrezorProtobuf::HDNodeType* temp = node_;
  node_ = NULL;
  return temp;
}
inline void Storage::set_allocated_node(::TrezorProtobuf::HDNodeType* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.Storage.node)
}

// optional string mnemonic = 3;
inline bool Storage::has_mnemonic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Storage::set_has_mnemonic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Storage::clear_has_mnemonic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Storage::clear_mnemonic() {
  mnemonic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mnemonic();
}
inline const ::std::string& Storage::mnemonic() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.mnemonic)
  return mnemonic_.GetNoArena();
}
inline void Storage::set_mnemonic(const ::std::string& value) {
  set_has_mnemonic();
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.mnemonic)
}
#if LANG_CXX11
inline void Storage::set_mnemonic(::std::string&& value) {
  set_has_mnemonic();
  mnemonic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrezorProtobuf.Storage.mnemonic)
}
#endif
inline void Storage::set_mnemonic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mnemonic();
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.Storage.mnemonic)
}
inline void Storage::set_mnemonic(const char* value, size_t size) {
  set_has_mnemonic();
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.Storage.mnemonic)
}
inline ::std::string* Storage::mutable_mnemonic() {
  set_has_mnemonic();
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Storage.mnemonic)
  return mnemonic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Storage::release_mnemonic() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.Storage.mnemonic)
  clear_has_mnemonic();
  return mnemonic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Storage::set_allocated_mnemonic(::std::string* mnemonic) {
  if (mnemonic != NULL) {
    set_has_mnemonic();
  } else {
    clear_has_mnemonic();
  }
  mnemonic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnemonic);
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.Storage.mnemonic)
}

// optional bool passphrase_protection = 4;
inline bool Storage::has_passphrase_protection() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Storage::set_has_passphrase_protection() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Storage::clear_has_passphrase_protection() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Storage::clear_passphrase_protection() {
  passphrase_protection_ = false;
  clear_has_passphrase_protection();
}
inline bool Storage::passphrase_protection() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.passphrase_protection)
  return passphrase_protection_;
}
inline void Storage::set_passphrase_protection(bool value) {
  set_has_passphrase_protection();
  passphrase_protection_ = value;
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.passphrase_protection)
}

// optional uint32 pin_failed_attempts = 5;
inline bool Storage::has_pin_failed_attempts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Storage::set_has_pin_failed_attempts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Storage::clear_has_pin_failed_attempts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Storage::clear_pin_failed_attempts() {
  pin_failed_attempts_ = 0u;
  clear_has_pin_failed_attempts();
}
inline ::google::protobuf::uint32 Storage::pin_failed_attempts() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.pin_failed_attempts)
  return pin_failed_attempts_;
}
inline void Storage::set_pin_failed_attempts(::google::protobuf::uint32 value) {
  set_has_pin_failed_attempts();
  pin_failed_attempts_ = value;
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.pin_failed_attempts)
}

// optional string pin = 6;
inline bool Storage::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Storage::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Storage::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Storage::clear_pin() {
  pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pin();
}
inline const ::std::string& Storage::pin() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.pin)
  return pin_.GetNoArena();
}
inline void Storage::set_pin(const ::std::string& value) {
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.pin)
}
#if LANG_CXX11
inline void Storage::set_pin(::std::string&& value) {
  set_has_pin();
  pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrezorProtobuf.Storage.pin)
}
#endif
inline void Storage::set_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.Storage.pin)
}
inline void Storage::set_pin(const char* value, size_t size) {
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.Storage.pin)
}
inline ::std::string* Storage::mutable_pin() {
  set_has_pin();
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Storage.pin)
  return pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Storage::release_pin() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.Storage.pin)
  clear_has_pin();
  return pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Storage::set_allocated_pin(::std::string* pin) {
  if (pin != NULL) {
    set_has_pin();
  } else {
    clear_has_pin();
  }
  pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pin);
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.Storage.pin)
}

// optional string language = 7;
inline bool Storage::has_language() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Storage::set_has_language() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Storage::clear_has_language() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Storage::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& Storage::language() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.language)
  return language_.GetNoArena();
}
inline void Storage::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.language)
}
#if LANG_CXX11
inline void Storage::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrezorProtobuf.Storage.language)
}
#endif
inline void Storage::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.Storage.language)
}
inline void Storage::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.Storage.language)
}
inline ::std::string* Storage::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Storage.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Storage::release_language() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.Storage.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Storage::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.Storage.language)
}

// optional string label = 8;
inline bool Storage::has_label() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Storage::set_has_label() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Storage::clear_has_label() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Storage::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Storage::label() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.label)
  return label_.GetNoArena();
}
inline void Storage::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.label)
}
#if LANG_CXX11
inline void Storage::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrezorProtobuf.Storage.label)
}
#endif
inline void Storage::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.Storage.label)
}
inline void Storage::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.Storage.label)
}
inline ::std::string* Storage::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Storage.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Storage::release_label() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.Storage.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Storage::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.Storage.label)
}

// optional bool imported = 9;
inline bool Storage::has_imported() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Storage::set_has_imported() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Storage::clear_has_imported() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Storage::clear_imported() {
  imported_ = false;
  clear_has_imported();
}
inline bool Storage::imported() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.imported)
  return imported_;
}
inline void Storage::set_imported(bool value) {
  set_has_imported();
  imported_ = value;
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.imported)
}

// optional bytes homescreen = 10;
inline bool Storage::has_homescreen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Storage::set_has_homescreen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Storage::clear_has_homescreen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Storage::clear_homescreen() {
  homescreen_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homescreen();
}
inline const ::std::string& Storage::homescreen() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.homescreen)
  return homescreen_.GetNoArena();
}
inline void Storage::set_homescreen(const ::std::string& value) {
  set_has_homescreen();
  homescreen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.homescreen)
}
#if LANG_CXX11
inline void Storage::set_homescreen(::std::string&& value) {
  set_has_homescreen();
  homescreen_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrezorProtobuf.Storage.homescreen)
}
#endif
inline void Storage::set_homescreen(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_homescreen();
  homescreen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.Storage.homescreen)
}
inline void Storage::set_homescreen(const void* value, size_t size) {
  set_has_homescreen();
  homescreen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.Storage.homescreen)
}
inline ::std::string* Storage::mutable_homescreen() {
  set_has_homescreen();
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Storage.homescreen)
  return homescreen_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Storage::release_homescreen() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.Storage.homescreen)
  clear_has_homescreen();
  return homescreen_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Storage::set_allocated_homescreen(::std::string* homescreen) {
  if (homescreen != NULL) {
    set_has_homescreen();
  } else {
    clear_has_homescreen();
  }
  homescreen_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homescreen);
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.Storage.homescreen)
}

// optional uint32 u2f_counter = 11;
inline bool Storage::has_u2f_counter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Storage::set_has_u2f_counter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Storage::clear_has_u2f_counter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Storage::clear_u2f_counter() {
  u2f_counter_ = 0u;
  clear_has_u2f_counter();
}
inline ::google::protobuf::uint32 Storage::u2f_counter() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Storage.u2f_counter)
  return u2f_counter_;
}
inline void Storage::set_u2f_counter(::google::protobuf::uint32 value) {
  set_has_u2f_counter();
  u2f_counter_ = value;
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Storage.u2f_counter)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace TrezorProtobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_storage_2eproto__INCLUDED
