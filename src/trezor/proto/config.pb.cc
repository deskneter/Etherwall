// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TrezorProtobuf {
class DeviceDescriptorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceDescriptor> {
} _DeviceDescriptor_default_instance_;
class ConfigurationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Configuration> {
} _Configuration_default_instance_;

namespace protobuf_config_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptor, vendor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptor, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptor, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDescriptor, path_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, whitelist_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, blacklist_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, wire_protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, known_devices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, valid_until_),
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(DeviceDescriptor)},
  { 13, 23, sizeof(Configuration)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Configuration_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _DeviceDescriptor_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Configuration_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::InitDefaults();
  _DeviceDescriptor_default_instance_.DefaultConstruct();
  _Configuration_default_instance_.DefaultConstruct();
  _Configuration_default_instance_.get_mutable()->wire_protocol_ = const_cast< ::google::protobuf::FileDescriptorSet*>(
      ::google::protobuf::FileDescriptorSet::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014config.proto\022\016TrezorProtobuf\032 google/p"
      "rotobuf/descriptor.proto\"^\n\020DeviceDescri"
      "ptor\022\021\n\tvendor_id\030\001 \001(\r\022\022\n\nproduct_id\030\002 "
      "\001(\r\022\025\n\rserial_number\030\003 \001(\t\022\014\n\004path\030\004 \001(\t"
      "\"\310\001\n\rConfiguration\022\026\n\016whitelist_urls\030\001 \003"
      "(\t\022\026\n\016blacklist_urls\030\002 \003(\t\0229\n\rwire_proto"
      "col\030\003 \002(\0132\".google.protobuf.FileDescript"
      "orSet\0227\n\rknown_devices\030\004 \003(\0132 .TrezorPro"
      "tobuf.DeviceDescriptor\022\023\n\013valid_until\030\005 "
      "\001(\rB/\n\037com.satoshilabs.trezor.protobufB\014"
      "TrezorConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 412);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_config_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceDescriptor::kVendorIdFieldNumber;
const int DeviceDescriptor::kProductIdFieldNumber;
const int DeviceDescriptor::kSerialNumberFieldNumber;
const int DeviceDescriptor::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceDescriptor::DeviceDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrezorProtobuf.DeviceDescriptor)
}
DeviceDescriptor::DeviceDescriptor(const DeviceDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&vendor_id_, &from.vendor_id_,
    reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&vendor_id_) + sizeof(product_id_));
  // @@protoc_insertion_point(copy_constructor:TrezorProtobuf.DeviceDescriptor)
}

void DeviceDescriptor::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vendor_id_, 0, reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&vendor_id_) + sizeof(product_id_));
}

DeviceDescriptor::~DeviceDescriptor() {
  // @@protoc_insertion_point(destructor:TrezorProtobuf.DeviceDescriptor)
  SharedDtor();
}

void DeviceDescriptor::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceDescriptor::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceDescriptor& DeviceDescriptor::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceDescriptor* DeviceDescriptor::New(::google::protobuf::Arena* arena) const {
  DeviceDescriptor* n = new DeviceDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:TrezorProtobuf.DeviceDescriptor)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&vendor_id_, 0, reinterpret_cast<char*>(&product_id_) -
      reinterpret_cast<char*>(&vendor_id_) + sizeof(product_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrezorProtobuf.DeviceDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vendor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_vendor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 product_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_product_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrezorProtobuf.DeviceDescriptor.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrezorProtobuf.DeviceDescriptor.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrezorProtobuf.DeviceDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrezorProtobuf.DeviceDescriptor)
  return false;
#undef DO_
}

void DeviceDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrezorProtobuf.DeviceDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 vendor_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_id(), output);
  }

  // optional uint32 product_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->product_id(), output);
  }

  // optional string serial_number = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrezorProtobuf.DeviceDescriptor.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serial_number(), output);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrezorProtobuf.DeviceDescriptor.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrezorProtobuf.DeviceDescriptor)
}

::google::protobuf::uint8* DeviceDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic __attribute__((unused)), ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrezorProtobuf.DeviceDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 vendor_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vendor_id(), target);
  }

  // optional uint32 product_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->product_id(), target);
  }

  // optional string serial_number = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrezorProtobuf.DeviceDescriptor.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serial_number(), target);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrezorProtobuf.DeviceDescriptor.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrezorProtobuf.DeviceDescriptor)
  return target;
}

size_t DeviceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrezorProtobuf.DeviceDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string serial_number = 3;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint32 vendor_id = 1;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional uint32 product_id = 2;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrezorProtobuf.DeviceDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrezorProtobuf.DeviceDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrezorProtobuf.DeviceDescriptor)
    MergeFrom(*source);
  }
}

void DeviceDescriptor::MergeFrom(const DeviceDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrezorProtobuf.DeviceDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000004u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      product_id_ = from.product_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrezorProtobuf.DeviceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDescriptor::CopyFrom(const DeviceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrezorProtobuf.DeviceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDescriptor::IsInitialized() const {
  return true;
}

void DeviceDescriptor::Swap(DeviceDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceDescriptor::InternalSwap(DeviceDescriptor* other) {
  serial_number_.Swap(&other->serial_number_);
  path_.Swap(&other->path_);
  std::swap(vendor_id_, other->vendor_id_);
  std::swap(product_id_, other->product_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceDescriptor::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceDescriptor

// optional uint32 vendor_id = 1;
bool DeviceDescriptor::has_vendor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceDescriptor::set_has_vendor_id() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceDescriptor::clear_has_vendor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceDescriptor::clear_vendor_id() {
  vendor_id_ = 0u;
  clear_has_vendor_id();
}
::google::protobuf::uint32 DeviceDescriptor::vendor_id() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.DeviceDescriptor.vendor_id)
  return vendor_id_;
}
void DeviceDescriptor::set_vendor_id(::google::protobuf::uint32 value) {
  set_has_vendor_id();
  vendor_id_ = value;
  // @@protoc_insertion_point(field_set:TrezorProtobuf.DeviceDescriptor.vendor_id)
}

// optional uint32 product_id = 2;
bool DeviceDescriptor::has_product_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceDescriptor::set_has_product_id() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceDescriptor::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceDescriptor::clear_product_id() {
  product_id_ = 0u;
  clear_has_product_id();
}
::google::protobuf::uint32 DeviceDescriptor::product_id() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.DeviceDescriptor.product_id)
  return product_id_;
}
void DeviceDescriptor::set_product_id(::google::protobuf::uint32 value) {
  set_has_product_id();
  product_id_ = value;
  // @@protoc_insertion_point(field_set:TrezorProtobuf.DeviceDescriptor.product_id)
}

// optional string serial_number = 3;
bool DeviceDescriptor::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceDescriptor::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceDescriptor::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceDescriptor::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& DeviceDescriptor::serial_number() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.DeviceDescriptor.serial_number)
  return serial_number_.GetNoArena();
}
void DeviceDescriptor::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrezorProtobuf.DeviceDescriptor.serial_number)
}
#if LANG_CXX11
void DeviceDescriptor::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrezorProtobuf.DeviceDescriptor.serial_number)
}
#endif
void DeviceDescriptor::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.DeviceDescriptor.serial_number)
}
void DeviceDescriptor::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.DeviceDescriptor.serial_number)
}
::std::string* DeviceDescriptor::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.DeviceDescriptor.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceDescriptor::release_serial_number() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.DeviceDescriptor.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceDescriptor::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.DeviceDescriptor.serial_number)
}

// optional string path = 4;
bool DeviceDescriptor::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceDescriptor::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceDescriptor::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceDescriptor::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& DeviceDescriptor::path() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.DeviceDescriptor.path)
  return path_.GetNoArena();
}
void DeviceDescriptor::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrezorProtobuf.DeviceDescriptor.path)
}
#if LANG_CXX11
void DeviceDescriptor::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrezorProtobuf.DeviceDescriptor.path)
}
#endif
void DeviceDescriptor::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.DeviceDescriptor.path)
}
void DeviceDescriptor::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.DeviceDescriptor.path)
}
::std::string* DeviceDescriptor::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.DeviceDescriptor.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceDescriptor::release_path() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.DeviceDescriptor.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceDescriptor::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.DeviceDescriptor.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Configuration::kWhitelistUrlsFieldNumber;
const int Configuration::kBlacklistUrlsFieldNumber;
const int Configuration::kWireProtocolFieldNumber;
const int Configuration::kKnownDevicesFieldNumber;
const int Configuration::kValidUntilFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Configuration::Configuration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrezorProtobuf.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      whitelist_urls_(from.whitelist_urls_),
      blacklist_urls_(from.blacklist_urls_),
      known_devices_(from.known_devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_wire_protocol()) {
    wire_protocol_ = new ::google::protobuf::FileDescriptorSet(*from.wire_protocol_);
  } else {
    wire_protocol_ = NULL;
  }
  valid_until_ = from.valid_until_;
  // @@protoc_insertion_point(copy_constructor:TrezorProtobuf.Configuration)
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&wire_protocol_, 0, reinterpret_cast<char*>(&valid_until_) -
    reinterpret_cast<char*>(&wire_protocol_) + sizeof(valid_until_));
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:TrezorProtobuf.Configuration)
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != internal_default_instance()) {
    delete wire_protocol_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Configuration& Configuration::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

Configuration* Configuration::New(::google::protobuf::Arena* arena) const {
  Configuration* n = new Configuration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:TrezorProtobuf.Configuration)
  whitelist_urls_.Clear();
  blacklist_urls_.Clear();
  known_devices_.Clear();
  if (has_wire_protocol()) {
    GOOGLE_DCHECK(wire_protocol_ != NULL);
    wire_protocol_->::google::protobuf::FileDescriptorSet::Clear();
  }
  valid_until_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrezorProtobuf.Configuration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string whitelist_urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_whitelist_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->whitelist_urls(this->whitelist_urls_size() - 1).data(),
            this->whitelist_urls(this->whitelist_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrezorProtobuf.Configuration.whitelist_urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string blacklist_urls = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blacklist_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blacklist_urls(this->blacklist_urls_size() - 1).data(),
            this->blacklist_urls(this->blacklist_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrezorProtobuf.Configuration.blacklist_urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .google.protobuf.FileDescriptorSet wire_protocol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wire_protocol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TrezorProtobuf.DeviceDescriptor known_devices = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_known_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 valid_until = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_valid_until();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrezorProtobuf.Configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrezorProtobuf.Configuration)
  return false;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrezorProtobuf.Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string whitelist_urls = 1;
  for (int i = 0, n = this->whitelist_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->whitelist_urls(i).data(), this->whitelist_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrezorProtobuf.Configuration.whitelist_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->whitelist_urls(i), output);
  }

  // repeated string blacklist_urls = 2;
  for (int i = 0, n = this->blacklist_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blacklist_urls(i).data(), this->blacklist_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrezorProtobuf.Configuration.blacklist_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->blacklist_urls(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .google.protobuf.FileDescriptorSet wire_protocol = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->wire_protocol_, output);
  }

  // repeated .TrezorProtobuf.DeviceDescriptor known_devices = 4;
  for (unsigned int i = 0, n = this->known_devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->known_devices(i), output);
  }

  // optional uint32 valid_until = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->valid_until(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrezorProtobuf.Configuration)
}

::google::protobuf::uint8* Configuration::InternalSerializeWithCachedSizesToArray(
    bool deterministic __attribute__((unused)), ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrezorProtobuf.Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string whitelist_urls = 1;
  for (int i = 0, n = this->whitelist_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->whitelist_urls(i).data(), this->whitelist_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrezorProtobuf.Configuration.whitelist_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->whitelist_urls(i), target);
  }

  // repeated string blacklist_urls = 2;
  for (int i = 0, n = this->blacklist_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blacklist_urls(i).data(), this->blacklist_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrezorProtobuf.Configuration.blacklist_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->blacklist_urls(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .google.protobuf.FileDescriptorSet wire_protocol = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->wire_protocol_, deterministic, target);
  }

  // repeated .TrezorProtobuf.DeviceDescriptor known_devices = 4;
  for (unsigned int i = 0, n = this->known_devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->known_devices(i), deterministic, target);
  }

  // optional uint32 valid_until = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->valid_until(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrezorProtobuf.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrezorProtobuf.Configuration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .google.protobuf.FileDescriptorSet wire_protocol = 3;
  if (has_wire_protocol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wire_protocol_);
  }
  // repeated string whitelist_urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->whitelist_urls_size());
  for (int i = 0, n = this->whitelist_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->whitelist_urls(i));
  }

  // repeated string blacklist_urls = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->blacklist_urls_size());
  for (int i = 0, n = this->blacklist_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blacklist_urls(i));
  }

  // repeated .TrezorProtobuf.DeviceDescriptor known_devices = 4;
  {
    unsigned int count = this->known_devices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->known_devices(i));
    }
  }

  // optional uint32 valid_until = 5;
  if (has_valid_until()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->valid_until());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrezorProtobuf.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const Configuration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Configuration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrezorProtobuf.Configuration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrezorProtobuf.Configuration)
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrezorProtobuf.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  whitelist_urls_.MergeFrom(from.whitelist_urls_);
  blacklist_urls_.MergeFrom(from.blacklist_urls_);
  known_devices_.MergeFrom(from.known_devices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_wire_protocol()->::google::protobuf::FileDescriptorSet::MergeFrom(from.wire_protocol());
    }
    if (cached_has_bits & 0x00000002u) {
      valid_until_ = from.valid_until_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrezorProtobuf.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrezorProtobuf.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_wire_protocol()) {
    if (!this->wire_protocol_->IsInitialized()) return false;
  }
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Configuration::InternalSwap(Configuration* other) {
  whitelist_urls_.InternalSwap(&other->whitelist_urls_);
  blacklist_urls_.InternalSwap(&other->blacklist_urls_);
  known_devices_.InternalSwap(&other->known_devices_);
  std::swap(wire_protocol_, other->wire_protocol_);
  std::swap(valid_until_, other->valid_until_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Configuration

// repeated string whitelist_urls = 1;
int Configuration::whitelist_urls_size() const {
  return whitelist_urls_.size();
}
void Configuration::clear_whitelist_urls() {
  whitelist_urls_.Clear();
}
const ::std::string& Configuration::whitelist_urls(int index) const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Configuration.whitelist_urls)
  return whitelist_urls_.Get(index);
}
::std::string* Configuration::mutable_whitelist_urls(int index) {
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Configuration.whitelist_urls)
  return whitelist_urls_.Mutable(index);
}
void Configuration::set_whitelist_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Configuration.whitelist_urls)
  whitelist_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Configuration::set_whitelist_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Configuration.whitelist_urls)
  whitelist_urls_.Mutable(index)->assign(std::move(value));
}
#endif
void Configuration::set_whitelist_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  whitelist_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.Configuration.whitelist_urls)
}
void Configuration::set_whitelist_urls(int index, const char* value, size_t size) {
  whitelist_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.Configuration.whitelist_urls)
}
::std::string* Configuration::add_whitelist_urls() {
  // @@protoc_insertion_point(field_add_mutable:TrezorProtobuf.Configuration.whitelist_urls)
  return whitelist_urls_.Add();
}
void Configuration::add_whitelist_urls(const ::std::string& value) {
  whitelist_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TrezorProtobuf.Configuration.whitelist_urls)
}
#if LANG_CXX11
void Configuration::add_whitelist_urls(::std::string&& value) {
  whitelist_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TrezorProtobuf.Configuration.whitelist_urls)
}
#endif
void Configuration::add_whitelist_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  whitelist_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TrezorProtobuf.Configuration.whitelist_urls)
}
void Configuration::add_whitelist_urls(const char* value, size_t size) {
  whitelist_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TrezorProtobuf.Configuration.whitelist_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Configuration::whitelist_urls() const {
  // @@protoc_insertion_point(field_list:TrezorProtobuf.Configuration.whitelist_urls)
  return whitelist_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Configuration::mutable_whitelist_urls() {
  // @@protoc_insertion_point(field_mutable_list:TrezorProtobuf.Configuration.whitelist_urls)
  return &whitelist_urls_;
}

// repeated string blacklist_urls = 2;
int Configuration::blacklist_urls_size() const {
  return blacklist_urls_.size();
}
void Configuration::clear_blacklist_urls() {
  blacklist_urls_.Clear();
}
const ::std::string& Configuration::blacklist_urls(int index) const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Configuration.blacklist_urls)
  return blacklist_urls_.Get(index);
}
::std::string* Configuration::mutable_blacklist_urls(int index) {
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Configuration.blacklist_urls)
  return blacklist_urls_.Mutable(index);
}
void Configuration::set_blacklist_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Configuration.blacklist_urls)
  blacklist_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Configuration::set_blacklist_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Configuration.blacklist_urls)
  blacklist_urls_.Mutable(index)->assign(std::move(value));
}
#endif
void Configuration::set_blacklist_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklist_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TrezorProtobuf.Configuration.blacklist_urls)
}
void Configuration::set_blacklist_urls(int index, const char* value, size_t size) {
  blacklist_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TrezorProtobuf.Configuration.blacklist_urls)
}
::std::string* Configuration::add_blacklist_urls() {
  // @@protoc_insertion_point(field_add_mutable:TrezorProtobuf.Configuration.blacklist_urls)
  return blacklist_urls_.Add();
}
void Configuration::add_blacklist_urls(const ::std::string& value) {
  blacklist_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TrezorProtobuf.Configuration.blacklist_urls)
}
#if LANG_CXX11
void Configuration::add_blacklist_urls(::std::string&& value) {
  blacklist_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TrezorProtobuf.Configuration.blacklist_urls)
}
#endif
void Configuration::add_blacklist_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklist_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TrezorProtobuf.Configuration.blacklist_urls)
}
void Configuration::add_blacklist_urls(const char* value, size_t size) {
  blacklist_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TrezorProtobuf.Configuration.blacklist_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Configuration::blacklist_urls() const {
  // @@protoc_insertion_point(field_list:TrezorProtobuf.Configuration.blacklist_urls)
  return blacklist_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Configuration::mutable_blacklist_urls() {
  // @@protoc_insertion_point(field_mutable_list:TrezorProtobuf.Configuration.blacklist_urls)
  return &blacklist_urls_;
}

// required .google.protobuf.FileDescriptorSet wire_protocol = 3;
bool Configuration::has_wire_protocol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Configuration::set_has_wire_protocol() {
  _has_bits_[0] |= 0x00000001u;
}
void Configuration::clear_has_wire_protocol() {
  _has_bits_[0] &= ~0x00000001u;
}
void Configuration::clear_wire_protocol() {
  if (wire_protocol_ != NULL) wire_protocol_->::google::protobuf::FileDescriptorSet::Clear();
  clear_has_wire_protocol();
}
const ::google::protobuf::FileDescriptorSet& Configuration::wire_protocol() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Configuration.wire_protocol)
  return wire_protocol_ != NULL ? *wire_protocol_
                         : *::google::protobuf::FileDescriptorSet::internal_default_instance();
}
::google::protobuf::FileDescriptorSet* Configuration::mutable_wire_protocol() {
  set_has_wire_protocol();
  if (wire_protocol_ == NULL) {
    wire_protocol_ = new ::google::protobuf::FileDescriptorSet;
  }
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Configuration.wire_protocol)
  return wire_protocol_;
}
::google::protobuf::FileDescriptorSet* Configuration::release_wire_protocol() {
  // @@protoc_insertion_point(field_release:TrezorProtobuf.Configuration.wire_protocol)
  clear_has_wire_protocol();
  ::google::protobuf::FileDescriptorSet* temp = wire_protocol_;
  wire_protocol_ = NULL;
  return temp;
}
void Configuration::set_allocated_wire_protocol(::google::protobuf::FileDescriptorSet* wire_protocol) {
  delete wire_protocol_;
  wire_protocol_ = wire_protocol;
  if (wire_protocol) {
    set_has_wire_protocol();
  } else {
    clear_has_wire_protocol();
  }
  // @@protoc_insertion_point(field_set_allocated:TrezorProtobuf.Configuration.wire_protocol)
}

// repeated .TrezorProtobuf.DeviceDescriptor known_devices = 4;
int Configuration::known_devices_size() const {
  return known_devices_.size();
}
void Configuration::clear_known_devices() {
  known_devices_.Clear();
}
const ::TrezorProtobuf::DeviceDescriptor& Configuration::known_devices(int index) const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Configuration.known_devices)
  return known_devices_.Get(index);
}
::TrezorProtobuf::DeviceDescriptor* Configuration::mutable_known_devices(int index) {
  // @@protoc_insertion_point(field_mutable:TrezorProtobuf.Configuration.known_devices)
  return known_devices_.Mutable(index);
}
::TrezorProtobuf::DeviceDescriptor* Configuration::add_known_devices() {
  // @@protoc_insertion_point(field_add:TrezorProtobuf.Configuration.known_devices)
  return known_devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::TrezorProtobuf::DeviceDescriptor >*
Configuration::mutable_known_devices() {
  // @@protoc_insertion_point(field_mutable_list:TrezorProtobuf.Configuration.known_devices)
  return &known_devices_;
}
const ::google::protobuf::RepeatedPtrField< ::TrezorProtobuf::DeviceDescriptor >&
Configuration::known_devices() const {
  // @@protoc_insertion_point(field_list:TrezorProtobuf.Configuration.known_devices)
  return known_devices_;
}

// optional uint32 valid_until = 5;
bool Configuration::has_valid_until() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Configuration::set_has_valid_until() {
  _has_bits_[0] |= 0x00000002u;
}
void Configuration::clear_has_valid_until() {
  _has_bits_[0] &= ~0x00000002u;
}
void Configuration::clear_valid_until() {
  valid_until_ = 0u;
  clear_has_valid_until();
}
::google::protobuf::uint32 Configuration::valid_until() const {
  // @@protoc_insertion_point(field_get:TrezorProtobuf.Configuration.valid_until)
  return valid_until_;
}
void Configuration::set_valid_until(::google::protobuf::uint32 value) {
  set_has_valid_until();
  valid_until_ = value;
  // @@protoc_insertion_point(field_set:TrezorProtobuf.Configuration.valid_until)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace TrezorProtobuf

// @@protoc_insertion_point(global_scope)
